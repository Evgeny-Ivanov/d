module GasEngine
    using DifferentialEquations: ODEProblem, RK4, solve

    function cal_gas_engine(; # функция расчета газового двигателя
        l_д = required,

        # Параметры газового двигателя 
        ψ = required, # угол наклона газового отверстия, в градусах
        d_ц = required, # диаметр газовой трубки, мм
        d_п = required, # диаметр поршня, мм
        d_0 = required, # диаметр газового отверстия, мм
        l_гп = required, # длина газового отверстия, мм
        l_го = required, # расстояние от казенного среза до газового отверстия, мм

        # Назначение циклограммы работы автоматики на участке БГД
        t_сх = required, # время свободного хода, с
        t_отп = required, # время отпирания, с

        # Параметры пороха
        f = required, # кДж/кг
        α_k = required, # дм^3/кг
        k = required,
        z_k = required,
        κ = required, # TODO ????
        λ = required,
        δ = required, # кг/дм^3
        I_k = required, # МПа/с
        T_1 = required, # К
        K_f = required,
        K_I = required,

        d = required, # калибр, м
        S = required, # м2
        ω = required, # кг
        q = required, # кг
        W_км = required, # м3
        p_max_кр = required, # крешерное давление, Па
        N_кр = required,

        # Назначение расчетных параметров
        n = required, # величина соотношения массы затвора и затворной рамы
        f_тр = required, # коэффициент трения
        α = required, # угол поворота выступов затвора при отпирании канала ствола, в градусах (α <= 60)
        r = required, # радиус выступа затвора

        μFormula = required, # номер формулы для μ

        I_в = required, # импульс выстрела, Н*с
        T = required, #

        K = required, # коэффициент учета второстепенных работ

        σ_T = required, # постоянная коэффициента теплоотдачи
        ν_T = required, # относительная разность температур газа и стенки

        p_всп = required, # Давление вспышки, МПа
        p_0 = required, # Давление форсирования, МПа
    )

        e = 2.7182818284590
        
        # Расчёт массы  подвижных частей
        # M_пч = (-108 * log10(I_в) + 504) / 10^3 # !!!!!!!!!!!!!!!!!!!!
        M_пч = 0.394

        # Расчет потребной скорости подвижных частей
        K1 = 1.3 # коэффициент дополнительных работ
        K2 = 1.15 # коэффициент надежности работы автоматики
        K3 = 1.55 # коэффициент, определяющий высоту падения оружия
        g = 9.81 # ускорение свободного падения, м/c2
        E_вп = K3 * M_пч * g # энергия возвратной пружины, Дж
        E_потребная = K1 * K2 * E_вп # потребная энергия, Дж

        V_пч_потребная = sqrt((2 * E_потребная) / M_пч) # потребная скорость подвижных частей, м/с


        # M_з = M_пч / (n + 1) #  масса затвора # !!!!!!!!!!!!!!!!!!!!
        # M_зр = n * (M_пч / (n + 1)) # масса затворной рамы # !!!!!!!!!!!!!!!!!!!!
        M_з = 0.091
        M_зр = 0.303


        # Определение передаточного отношения и КПД механизма (Пара затвор и затворная рама)
        ν_зр_з = tand(α) / r # передаточное число
        η_зс_с = tand(α) * (1 - 2 * f_тр * tand(α)) / (tand(α) + 2 * f_тр) # КПД

        # Расчет приведенных масс на участках циклограммы
        M_пр1 = M_зр #  приведенная масса на участке «Свободный ход», кг

        ρ = r
        J_з = (M_з * ρ^2) / 2 # момент инерции затвора, кг*м2
        M_пр2 = M_зр + (J_з / ρ^2) * (ν_зр_з^2 / η_зс_с) # приведенная масса на участке «Отпирание», кг

        M_пр3 = M_пч # приведенная масса на участке «Отдача», кг


        S_п = π / 4 * d_п ^ 2
        S_ц = π / 4 * d_ц ^ 2
        S_Δ = π * d_п * (d_ц - d_п) / 2

        l_0гк = 20 * 10.0^-3 # TODO - нужно вынести это значение на клиент
        W_0гк = π * l_0гк * (d_ц / 2)^2

        p_а = 10^5 # Атмосферное давление, Па

        R = f / T_1
        μ = 0.95 # ???
        A_1 = sqrt(k * (2 / (k + 1))^((k + 1) / (k - 1)))
        # φ = K + ω / (3 * q) # !!!!!!!!!!!!!!!!!!!!
        φ = 1.2

        W_0 = W_км - ω / δ
        F_0 = 4 * (W_км / d)

        p_max = p_max_кр * ((1.15 * N_кр * φ) / (K + ω / (2 * q)))

        #
        ξ_1(x, y) = x >= p_0 || y > 0 ? 1 : 0
        ξ_2(x) = 0 <= x <= z_k ? 1 : 0
        ξ_3(x) = x <= l_д ? 1 : 0
        ξ_4(x) = x <= (2 / (k + 1))^(k / (k + 1)) ? 1 : 0
        ξ_5(x) = x <= l_го ? 1 : 0

        function α_ГО(x) # Коэффициент давления у газоотводного отверстия
            buf1 = 1 / (1 + ω / (3 * K * q))
            buf2 = 1 + ω / (2 * K * q)
            buf3 = 1 + ω / (2 * K * q) - 1
            buf4 = (l_го^2) / (x^2 + ξ_5(x))

            return buf1 * ( buf2 - buf3 * buf4)
        end

        function G_ГК(x, y, z1, z2, z3, z4, z5)
            buf1 = 1 - 0.003 * (l_гп / d_0)
            buf2 = y / (x * α_ГО(z5))
            buf3 = (π / 4) * d_0^2
            buf4 = sqrt(k * (2 / (k + 1))^((k + 1) / (k - 1)))
            buf5 = (x * α_ГО(z5)) / sqrt((x * α_ГО(z5) * z1) / z2)
            buf6 = sqrt((2 * k) / (k - 1))

            buf7 = y / (x * α_ГО(z5))

            if  x * α_ГО(z5) >= y
                buf8 = sqrt(complex(buf7)^(2 / k) - complex(buf7)^((k+1) / k))
                r1 = buf1 * (ξ_4(buf2) * buf3 * buf4 * buf5 + (1 - ξ_4(buf2)) * buf3 * buf6 * buf5 * buf8)
                return r1
            end

            buf9 = y / sqrt((y * z3) / z4)
            buf10 = sqrt((1 / buf7)^(2 / k) - (1 / buf7)^((k+1) / k))
            r2 = - buf1 * (ξ_4(1 / buf2) * buf3 * buf4 * buf9 + (1 - ξ_4(1 / buf2)) * buf3 * buf6 * buf9 * buf10)
            return r2
        end

        # Число Маха
        function M(z1, z2, z3, z4, z5)
            buf1 = (l_го / (z4 + ξ_5(z4))) * z3 * ξ_3(z4)
            buf2 = sqrt((k * z1 * α_ГО(z4) * z2) / z5)
            buf3 = (l_го / l_д) * sqrt((1 / (1 + ω / (3 * K * q))) / α_ГО(z4)) * (1 - ξ_3(z4))

            return buf1 / buf2 + buf3
        end

        # Коэффициент скорости
        function Λ(z1, z2, z3, z4, z5)
            M_buf = M(z1, z2, z3, z4, z5)
            return sqrt((k + 1) / 2) * M_buf * (1 + ((k - 1) / 2) * M_buf^2)^(-0.5)
        end


        # Коэффициенты расхода
        # Формула Ижевск
        function μ_01(x, y, z1, z2, z3, z4, z5)
            M_buf = M(z1, z2, z3, z4, z5)
            r1 = 0.55 * (1 + 0.8 * M_buf * cosd(ψ)) * e^(-1.19 * M_buf^2 - 0.36 * M_buf)
            r2 = 0.8

            return x * α_ГО(z4) >= y ? r1 : r2
        end

        # Формула Кириллова (Ижевск)
        function μ_02(x, y, z1, z2, z3, z4, z5)
            Λ_buf = Λ(z1, z2, z3, z4, z5)
            r1 = 0.55 * (1 + 0.57 * Λ_buf * cosd(ψ)) * e^(0.045 * Λ_buf - 1.84 * Λ_buf^2)
            r2 = 0.8 # TODO ? такого в лекциях не было

            return x * α_ГО(z4) >= y ? r1 : r2
        end

        # формула Орлова
        μ_03 = 1 / (1 + k * (1 - cosd(ψ)))

        # коэффициент расхода через зазоры
        μ_Δ = 0.17 + (d_ц - d_п) * 10^3

        function M_ПP(x)
            if x <= t_сх
                return M_пр1
            end

            if t_сх < x <= t_отп
                return M_пр2
            end

            return M_пр3
        end

        function ode_for_τ(τ)
            I_kτ = I_k * (1 - K_I * (τ - T))
            f_τ = f * (1 + K_f * (τ - T))

            function ode(da, a, p, t)
                q1 = f_τ * ω * κ * (1 + 2 * λ * a[4]) * a[1] * ξ_2(a[4]) / I_kτ

                q2 = (k - 1) * σ_T * (ν_T / R) * (4 * (W_км / d) + a[6] * π * d) * a[1]

                q3_buf1 = ω * (1 - α_k * δ) * (κ * (1 + 2 * λ * a[4]) * (a[1] * ξ_2(a[4])) / I_kτ )
                q3 = k * a[1] * ( q3_buf1 / δ + S * a[5] + S * a[9] ) * ξ_3(a[6])

                q4_buf1 = μ * S * A_1 * a[1] * (1 - ξ_3(a[6]))
                q4 = (k * a[1] * a[2] * q4_buf1 / sqrt(a[1] * a[2] / a[7])) / a[7]

                μ_01_buf = μ_02(a[1], a[11], a[1], a[2], a[5], a[6], a[7])
                if μFormula == 1
                    μ_01_buf = μ_01(a[1], a[11], a[1], a[2], a[5], a[6], a[7])
                elseif  μFormula == 3
                    μ_01_buf = μ_03
                end


                G_ГК_buf = G_ГК(a[1], a[11], a[2], a[7], a[12], a[13], a[6])
                q5 = (k * a[1] * a[2] / a[7]) * μ_01_buf *  G_ГК_buf * (1 - ξ_5(a[6]))
                da[1] = 1 / a[2] * (q1 - q2 - q3 - q4 - q5)


                da[2] = q3 / (k * a[1])


                da[3] = κ * (1 + 2 * λ * a[4]) * a[1] * ξ_2(a[4]) / I_kτ


                da[4] = a[1] * ξ_2(a[4]) / I_kτ

                da[5] = a[1] * S * ξ_1(a[1], a[6]) * ξ_3(a[6]) / (φ * q)


                da[6] = a[5] * ξ_3(a[6])


                da7_buf1 = ω * κ * (1 + 2 * λ * a[4]) * a[1] * ξ_2(a[4]) / I_kτ
                da7_buf2 = μ * S * A_1 * a[1] * (1 - ξ_3(a[6])) / sqrt(a[1] * a[2] / a[7])
                da7_buf3 = μ_01_buf * G_ГК_buf * (1 - ξ_5(a[6]))
                da[7] = da7_buf1 - da7_buf2 - da7_buf3

                da[8] = a[11] * S_п


                da[9] = a[11] * S_п * (1 - ξ_5(a[6])) / M_ПP(t)


                da[10] = a[9]


                q_10_1 = k * a[11] * a[12] / a[13] * da7_buf3
                q_10_2 = k * a[11] * a[12] / a[13] * (μ_Δ * S_Δ * A_1 * a[11] * (1 - ξ_5(a[6]))) / sqrt(a[11] * a[12] / a[13])
                q_10_3 = k * a[11] * S_ц * a[9] - (k - 1) * σ_T * ν_T / R * (4 * W_0гк/d_ц + a[10] * π * d_ц) * a[11] * (1 - ξ_5(a[6]))
                da[11] = 1 / a[12] * (q_10_1 - q_10_2 - q_10_3)


                da[12] = S_ц * a[9]

                da[13] =  μ_01_buf * G_ГК_buf * (1 - ξ_5(a[6])) - (μ_Δ  *S_Δ * A_1 * a[11] * (1 - ξ_5(a[6]))) / sqrt(a[11] * a[12] / a[13])

                return da
            end
        end

        ρ_воздуха = 1.093 # кг / м3
        init_u = [p_всп; W_0; 0; 0; 0; 0; S * l_д * ρ_воздуха; 0; 0; 0; p_а; W_0гк; W_0гк * ρ_воздуха]
        tspan = (0.0, 0.03)
        τ = 273 + 15

        function run_cal()
            prob = ODEProblem(ode_for_τ(τ), init_u, tspan)
            alg = RK4() # выбираем метод интегрирования - решение дефолтным методом разваливается после t.max = 0.0016
            sol = solve(prob, alg, dt=10.0^-6)

            vars = Dict(
                "M_пч" => M_пч,
                "E_потребная" => E_потребная,
                "V_пч_потребная" => V_пч_потребная,
                "ν_зр_з" => ν_зр_з,
                "η_зс_с" => η_зс_с,
                "M_пр1" => M_пр1,
                "M_пр2" => M_пр2,
                "M_пр3" => M_пр3,
                "ρ" => ρ,
                "J_з" => J_з,
                "M_зр" => M_зр,
                "M_з" => M_з,
            )

            charts = Dict(
                "t" => sol.t,
                "u" => sol.u,
            )

            result = Dict(
                "vars" => vars,
                "charts" => charts,
            )

            return result
        end

        return run_cal()
    end

export cal_gas_engine
end